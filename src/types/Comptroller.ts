/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ActionPaused_string_bool = ContractEventLog<{
  action: string;
  pauseState: boolean;
  0: string;
  1: boolean;
}>;
export type ActionPaused_address_string_bool = ContractEventLog<{
  cToken: string;
  action: string;
  pauseState: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Failure = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type MarketEntered = ContractEventLog<{
  cToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketExited = ContractEventLog<{
  cToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketListed = ContractEventLog<{
  cToken: string;
  0: string;
}>;
export type MarketUnlisted = ContractEventLog<{
  cToken: string;
  0: string;
}>;
export type NewCloseFactor = ContractEventLog<{
  oldCloseFactorMantissa: string;
  newCloseFactorMantissa: string;
  0: string;
  1: string;
}>;
export type NewCollateralFactor = ContractEventLog<{
  cToken: string;
  oldCollateralFactorMantissa: string;
  newCollateralFactorMantissa: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewLiquidationIncentive = ContractEventLog<{
  oldLiquidationIncentiveMantissa: string;
  newLiquidationIncentiveMantissa: string;
  0: string;
  1: string;
}>;
export type NewMaxAssets = ContractEventLog<{
  oldMaxAssets: string;
  newMaxAssets: string;
  0: string;
  1: string;
}>;
export type NewPauseGuardian = ContractEventLog<{
  oldPauseGuardian: string;
  newPauseGuardian: string;
  0: string;
  1: string;
}>;
export type NewPriceOracle = ContractEventLog<{
  oldPriceOracle: string;
  newPriceOracle: string;
  0: string;
  1: string;
}>;
export type WhitelistEnforcementChanged = ContractEventLog<{
  enforce: boolean;
  0: boolean;
}>;

export interface Comptroller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Comptroller;
  clone(): Comptroller;
  methods: {
    _become(unitroller: string): NonPayableTransactionObject<void>;

    _borrowGuardianPaused(): NonPayableTransactionObject<boolean>;

    _mintGuardianPaused(): NonPayableTransactionObject<boolean>;

    _setBorrowPaused(
      cToken: string,
      state: boolean
    ): NonPayableTransactionObject<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setCollateralFactor(
      cToken: string,
      newCollateralFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setMaxAssets(
      newMaxAssets: number | string | BN
    ): NonPayableTransactionObject<string>;

    _setMintPaused(
      cToken: string,
      state: boolean
    ): NonPayableTransactionObject<boolean>;

    _setPauseGuardian(
      newPauseGuardian: string
    ): NonPayableTransactionObject<string>;

    _setPriceOracle(newOracle: string): NonPayableTransactionObject<string>;

    _setSeizePaused(state: boolean): NonPayableTransactionObject<boolean>;

    _setTransferPaused(state: boolean): NonPayableTransactionObject<boolean>;

    _setWhitelistEnforcement(
      enforce: boolean
    ): NonPayableTransactionObject<string>;

    _setWhitelistStatuses(
      suppliers: string[],
      statuses: boolean[]
    ): NonPayableTransactionObject<string>;

    _supportMarket(cToken: string): NonPayableTransactionObject<string>;

    _supportMarketAndSetCollateralFactor(
      cToken: string,
      newCollateralFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<string>;

    _unsupportMarket(cToken: string): NonPayableTransactionObject<string>;

    accountAssets(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    adminHasRights(): NonPayableTransactionObject<boolean>;

    allBorrowers(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    allMarkets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    borrowAllowed(
      cToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    borrowGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    borrowVerify(
      cToken: string,
      borrower: string,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    borrowWithinLimits(
      cToken: string,
      accountBorrowsNew: number | string | BN
    ): NonPayableTransactionObject<string>;

    cTokensByUnderlying(arg0: string): NonPayableTransactionObject<string>;

    checkMembership(
      account: string,
      cToken: string
    ): NonPayableTransactionObject<boolean>;

    closeFactorMantissa(): NonPayableTransactionObject<string>;

    comptrollerImplementation(): NonPayableTransactionObject<string>;

    enforceWhitelist(): NonPayableTransactionObject<boolean>;

    enterMarkets(cTokens: string[]): NonPayableTransactionObject<string[]>;

    exitMarket(cTokenAddress: string): NonPayableTransactionObject<string>;

    fuseAdminHasRights(): NonPayableTransactionObject<boolean>;

    getAccountLiquidity(account: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getAllBorrowers(): NonPayableTransactionObject<string[]>;

    getAllMarkets(): NonPayableTransactionObject<string[]>;

    getAssetsIn(account: string): NonPayableTransactionObject<string[]>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: number | string | BN,
      borrowAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getMaxBorrow(
      account: string,
      cTokenModify: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getMaxRedeem(
      account: string,
      cTokenModify: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getWhitelist(): NonPayableTransactionObject<string[]>;

    isComptroller(): NonPayableTransactionObject<boolean>;

    liquidateBorrowAllowed(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    liquidateBorrowVerify(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      actualRepayAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    liquidationIncentiveMantissa(): NonPayableTransactionObject<string>;

    markets(arg0: string): NonPayableTransactionObject<{
      isListed: boolean;
      collateralFactorMantissa: string;
      0: boolean;
      1: string;
    }>;

    maxAssets(): NonPayableTransactionObject<string>;

    mintAllowed(
      cToken: string,
      minter: string,
      mintAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    mintGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    mintVerify(
      cToken: string,
      minter: string,
      actualMintAmount: number | string | BN,
      mintTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    mintWithinLimits(
      cToken: string,
      exchangeRateMantissa: number | string | BN,
      accountTokens: number | string | BN,
      mintAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    oracle(): NonPayableTransactionObject<string>;

    pauseGuardian(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingComptrollerImplementation(): NonPayableTransactionObject<string>;

    redeemAllowed(
      cToken: string,
      redeemer: string,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    redeemVerify(
      cToken: string,
      redeemer: string,
      redeemAmount: number | string | BN,
      redeemTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    repayBorrowAllowed(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    repayBorrowVerify(
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | string | BN,
      borrowerIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    seizeAllowed(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    seizeGuardianPaused(): NonPayableTransactionObject<boolean>;

    seizeVerify(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    suppliers(arg0: string): NonPayableTransactionObject<boolean>;

    transferAllowed(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferGuardianPaused(): NonPayableTransactionObject<boolean>;

    transferVerify(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    whitelist(arg0: string): NonPayableTransactionObject<boolean>;

    whitelistArray(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    "ActionPaused(string,bool)"(
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;
    "ActionPaused(string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_string_bool>
    ): EventEmitter;

    "ActionPaused(address,string,bool)"(
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;
    "ActionPaused(address,string,bool)"(
      options?: EventOptions,
      cb?: Callback<ActionPaused_address_string_bool>
    ): EventEmitter;

    Failure(cb?: Callback<Failure>): EventEmitter;
    Failure(options?: EventOptions, cb?: Callback<Failure>): EventEmitter;

    MarketEntered(cb?: Callback<MarketEntered>): EventEmitter;
    MarketEntered(
      options?: EventOptions,
      cb?: Callback<MarketEntered>
    ): EventEmitter;

    MarketExited(cb?: Callback<MarketExited>): EventEmitter;
    MarketExited(
      options?: EventOptions,
      cb?: Callback<MarketExited>
    ): EventEmitter;

    MarketListed(cb?: Callback<MarketListed>): EventEmitter;
    MarketListed(
      options?: EventOptions,
      cb?: Callback<MarketListed>
    ): EventEmitter;

    MarketUnlisted(cb?: Callback<MarketUnlisted>): EventEmitter;
    MarketUnlisted(
      options?: EventOptions,
      cb?: Callback<MarketUnlisted>
    ): EventEmitter;

    NewCloseFactor(cb?: Callback<NewCloseFactor>): EventEmitter;
    NewCloseFactor(
      options?: EventOptions,
      cb?: Callback<NewCloseFactor>
    ): EventEmitter;

    NewCollateralFactor(cb?: Callback<NewCollateralFactor>): EventEmitter;
    NewCollateralFactor(
      options?: EventOptions,
      cb?: Callback<NewCollateralFactor>
    ): EventEmitter;

    NewLiquidationIncentive(
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;
    NewLiquidationIncentive(
      options?: EventOptions,
      cb?: Callback<NewLiquidationIncentive>
    ): EventEmitter;

    NewMaxAssets(cb?: Callback<NewMaxAssets>): EventEmitter;
    NewMaxAssets(
      options?: EventOptions,
      cb?: Callback<NewMaxAssets>
    ): EventEmitter;

    NewPauseGuardian(cb?: Callback<NewPauseGuardian>): EventEmitter;
    NewPauseGuardian(
      options?: EventOptions,
      cb?: Callback<NewPauseGuardian>
    ): EventEmitter;

    NewPriceOracle(cb?: Callback<NewPriceOracle>): EventEmitter;
    NewPriceOracle(
      options?: EventOptions,
      cb?: Callback<NewPriceOracle>
    ): EventEmitter;

    WhitelistEnforcementChanged(
      cb?: Callback<WhitelistEnforcementChanged>
    ): EventEmitter;
    WhitelistEnforcementChanged(
      options?: EventOptions,
      cb?: Callback<WhitelistEnforcementChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Failure", cb: Callback<Failure>): void;
  once(event: "Failure", options: EventOptions, cb: Callback<Failure>): void;

  once(event: "MarketEntered", cb: Callback<MarketEntered>): void;
  once(
    event: "MarketEntered",
    options: EventOptions,
    cb: Callback<MarketEntered>
  ): void;

  once(event: "MarketExited", cb: Callback<MarketExited>): void;
  once(
    event: "MarketExited",
    options: EventOptions,
    cb: Callback<MarketExited>
  ): void;

  once(event: "MarketListed", cb: Callback<MarketListed>): void;
  once(
    event: "MarketListed",
    options: EventOptions,
    cb: Callback<MarketListed>
  ): void;

  once(event: "MarketUnlisted", cb: Callback<MarketUnlisted>): void;
  once(
    event: "MarketUnlisted",
    options: EventOptions,
    cb: Callback<MarketUnlisted>
  ): void;

  once(event: "NewCloseFactor", cb: Callback<NewCloseFactor>): void;
  once(
    event: "NewCloseFactor",
    options: EventOptions,
    cb: Callback<NewCloseFactor>
  ): void;

  once(event: "NewCollateralFactor", cb: Callback<NewCollateralFactor>): void;
  once(
    event: "NewCollateralFactor",
    options: EventOptions,
    cb: Callback<NewCollateralFactor>
  ): void;

  once(
    event: "NewLiquidationIncentive",
    cb: Callback<NewLiquidationIncentive>
  ): void;
  once(
    event: "NewLiquidationIncentive",
    options: EventOptions,
    cb: Callback<NewLiquidationIncentive>
  ): void;

  once(event: "NewMaxAssets", cb: Callback<NewMaxAssets>): void;
  once(
    event: "NewMaxAssets",
    options: EventOptions,
    cb: Callback<NewMaxAssets>
  ): void;

  once(event: "NewPauseGuardian", cb: Callback<NewPauseGuardian>): void;
  once(
    event: "NewPauseGuardian",
    options: EventOptions,
    cb: Callback<NewPauseGuardian>
  ): void;

  once(event: "NewPriceOracle", cb: Callback<NewPriceOracle>): void;
  once(
    event: "NewPriceOracle",
    options: EventOptions,
    cb: Callback<NewPriceOracle>
  ): void;

  once(
    event: "WhitelistEnforcementChanged",
    cb: Callback<WhitelistEnforcementChanged>
  ): void;
  once(
    event: "WhitelistEnforcementChanged",
    options: EventOptions,
    cb: Callback<WhitelistEnforcementChanged>
  ): void;
}
