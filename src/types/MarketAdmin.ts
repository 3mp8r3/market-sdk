/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface MarketAdmin extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MarketAdmin;
  clone(): MarketAdmin;
  methods: {
    acceptAdmin(): NonPayableTransactionObject<void>;

    addRewardsDistributor(
      distributor: string
    ): NonPayableTransactionObject<void>;

    comptroller(): NonPayableTransactionObject<string>;

    deployMarket(
      deployData: [
        string,
        string,
        string,
        string,
        string,
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    isMarketAdmin(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    reduceReserves(
      cToken: string,
      reduceAmount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAdminFee(
      cToken: string,
      newAdminFeeMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;

    setBorrowCaps(
      cTokens: string[],
      newBorrowCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setCTokenActionState(
      cToken: string,
      action: number | string | BN,
      state: boolean
    ): NonPayableTransactionObject<void>;

    setCloseFactor(
      newCloseFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCollateralFactor(
      cToken: string,
      newCollateralFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGlobalActionState(
      action: number | string | BN,
      state: boolean
    ): NonPayableTransactionObject<void>;

    setIRM(cToken: string, newIRM: string): NonPayableTransactionObject<void>;

    setLiquidationIncentive(
      newLiquidationIncentiveMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;

    setNameAndSymbol(
      cToken: string,
      _name: string,
      _symbol: string
    ): NonPayableTransactionObject<void>;

    setPriceOracle(newOracle: string): NonPayableTransactionObject<void>;

    setReserveFactor(
      cToken: string,
      newReserveFactorMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSupplyCaps(
      cTokens: string[],
      newSupplyCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setWhitelistEnforcement(
      enforce: boolean
    ): NonPayableTransactionObject<void>;

    setWhitelistStatuses(
      suppliers: string[],
      statuses: boolean[]
    ): NonPayableTransactionObject<void>;

    supportMarket(cToken: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unsupportMarket(cToken: string): NonPayableTransactionObject<void>;

    withdrawAdminFees(
      cToken: string,
      withdrawAmount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
