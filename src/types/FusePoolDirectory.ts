/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolChanged = ContractEventLog<{
  index: string;
  pool: [string, string, string, string, string];
  0: string;
  1: [string, string, string, string, string];
}>;
export type PoolRegistered = ContractEventLog<{
  index: string;
  pool: [string, string, string, string, string];
  0: string;
  1: [string, string, string, string, string];
}>;

export interface FusePoolDirectory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FusePoolDirectory;
  clone(): FusePoolDirectory;
  methods: {
    _setDeployerWhitelistEnforcement(
      _enforceDeployerWhitelist: boolean
    ): NonPayableTransactionObject<void>;

    _whitelistDeployers(deployers: string[]): NonPayableTransactionObject<void>;

    bookmarkPool(comptroller: string): NonPayableTransactionObject<void>;

    deployPool(
      name: string,
      implementation: string,
      enforceWhitelist: boolean,
      closeFactor: number | string | BN,
      maxAssets: number | string | BN,
      liquidationIncentive: number | string | BN,
      priceOracle: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    deployerWhitelist(arg0: string): NonPayableTransactionObject<boolean>;

    enforceDeployerWhitelist(): NonPayableTransactionObject<boolean>;

    getAllPools(): NonPayableTransactionObject<
      [string, string, string, string, string][]
    >;

    getBookmarks(account: string): NonPayableTransactionObject<string[]>;

    getPoolsByAccount(account: string): NonPayableTransactionObject<{
      0: string[];
      1: [string, string, string, string, string][];
    }>;

    getPublicPools(): NonPayableTransactionObject<{
      0: string[];
      1: [string, string, string, string, string][];
    }>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[]
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    poolExists(arg0: string): NonPayableTransactionObject<boolean>;

    pools(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      creator: string;
      comptroller: string;
      blockPosted: string;
      timestampPosted: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    registerPool(
      name: string,
      comptroller: string
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setPoolName(
      poolId: number | string | BN,
      newName: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PoolChanged(cb?: Callback<PoolChanged>): EventEmitter;
    PoolChanged(
      options?: EventOptions,
      cb?: Callback<PoolChanged>
    ): EventEmitter;

    PoolRegistered(cb?: Callback<PoolRegistered>): EventEmitter;
    PoolRegistered(
      options?: EventOptions,
      cb?: Callback<PoolRegistered>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PoolChanged", cb: Callback<PoolChanged>): void;
  once(
    event: "PoolChanged",
    options: EventOptions,
    cb: Callback<PoolChanged>
  ): void;

  once(event: "PoolRegistered", cb: Callback<PoolRegistered>): void;
  once(
    event: "PoolRegistered",
    options: EventOptions,
    cb: Callback<PoolRegistered>
  ): void;
}
